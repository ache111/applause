«IMPORT org::applause::lang::applauseDsl»
«IMPORT java::lang»

«EXTENSION templates::Extensions»
«EXTENSION templates::GeneratorExtensions»
«EXTENSION templates::MetamodelExtensions»
«EXTENSION templates::ProviderExtension»

«DEFINE main FOR SectionedView-»
«FILE activityFileName()»
package «packageName()»;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import de.itemis.base.AbstractRowAdapter;
import de.itemis.base.GenericItemAdapter;
import de.itemis.base.GenericListActivity;
import de.itemis.base.DetailsActivity;
import de.itemis.base.RowAdapter;
import de.itemis.base.SimpleItemContentProvider;
import de.itemis.base.LabeledIntent;

import com.google.common.base.Predicate;
import com.google.common.base.Splitter;
import static de.itemis.base.StringUtils.*;

public class «activityClassName()» extends «javaBaseClassName()»<«this.type()»> {

	«IF this.content!=null»
	«IF this.content.description.many»
	List<«this.type()»> «this.content.name»;
	«ELSE»
	«this.type()» «this.content.name»;
	«ENDIF»
	«ENDIF»
	
	«IF this.hasGPS()-»
	// GPS stuff
	private Location location;	
	
	@Override
	protected Predicate<Aanbieding> filterPredicate() {
		return new Predicate<Aanbieding>() {
			@Override
			public boolean apply(Aanbieding item) {
				if («activityClassName()».this.location != null) {
					Location currentLocation = new Location("");
					
					currentLocation.setLongitude(Double.parseDouble(item.getLocatieX()));
					currentLocation.setLatitude(Double.parseDouble(item.getLocatieY()));
					float distanceTo = currentLocation.distanceTo(«activityClassName()».this.location);
					System.out.println(String.format("Distance: %f", distanceTo));
					return (distanceTo < «this.firstCell().filter.distance»);
				}
				return false;
			}
		};
	}
	
	private void startGPSUpdates() {
		LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
		LocationListener locationListener = new LocationListener() {
			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
			}
			
			@Override
			public void onProviderEnabled(String provider) {
			}
			
			@Override
			public void onProviderDisabled(String provider) {
			}
			
			@Override
			public void onLocationChanged(Location location) {
				«activityClassName()».this.location = location;
				updateData();
			}
		};
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
	}
	«ENDIF-»

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setTitle(«this.title.expression("")»);
		«EXPAND header»
		
		«IF this.hasGPS()-»
		startGPSUpdates();
		«ELSE»
		updateData();
		«ENDIF-»
				
		finishCreation();
	}
	
	private void updateData() {
		«IF this.content!=null»
		«IF this.content.description.many»
		«this.content.name» = getItemsFromProvider();
		«ELSE»
		«this.content.name» = getItemFromProvider();
		«ENDIF»
		«ENDIF»

		ArrayList<AbstractRowAdapter> rowAdapters = new ArrayList<AbstractRowAdapter>();		
		«FOREACH this.sections.cells AS cell ITERATOR iter»
			«EXPAND cell(iter.counter1) FOR cell»
		«ENDFOREACH»
		
		setListAdapter(new GenericItemAdapter(this, rowAdapters));
	}
	
	
	«FOREACH this.sections.cells AS cell ITERATOR iter»
		«EXPAND cellClass(this, iter.counter1) FOR cell»
	«ENDFOREACH»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE header FOR SectionedView»«ENDDEFINE»

«DEFINE header FOR DetailsView»
«IF this.header!=null»
«IF header.title!=null»setHeaderTitle(«header.title.expression("")»);«ENDIF»
«IF header.detailsOrSubtitle()!=null»setHeaderDetails(«header.detailsOrSubtitle().expression("")»);«ENDIF»
«IF header.image!=null»setHeaderImageURL(«header.image.expression("")»);«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE cell(Integer i) FOR SectionCell»
«IF this.iterator!=null»
	Iterable<«iterator.collection.javaType()»> items«i» = «iterator.collection.expression("")»;
	if(items«i» != null)
		for(«iterator.collection.javaType()» i : items«i»)
			rowAdapters.add(new Cell«i»(i));
«ELSE»
	rowAdapters.add(new Cell«i»(null));
«ENDIF»
«ENDDEFINE»

«DEFINE cellClass(SectionedView view, Integer i) FOR SectionCell»
	«LET "Cell" + i AS className»
		private class «className» extends RowAdapter.«this.type.literal»<«javaType()»> {
	
			public «className»(«javaType()» item) {
				super(item);
			}
			
			@Override
			public void populateRowView() {
				«IF this.iterator!=null»«javaType()» «this.iterator.name» = getItem();«ENDIF»
				«IF text!=null»setText(«text.expression("")»);«ENDIF»
				«IF details!=null»setDetails(«details.expression("")»);«ENDIF»
				«IF query!=null»setQuery(«query.expression("")»);«ENDIF»
				«IF image!=null»setImageURL(«image.expression("")»);«ENDIF»
			}
	
			@Override
			public void handleClick() {
				«IF iterator!=null»«javaType()» «iterator.name» = getItem();«ENDIF»
			«EXPAND cellAction(this) FOR action»
			}
			
		}
	«ENDLET»
«ENDDEFINE»

«DEFINE cellAction(SectionCell cell) FOR ViewAction»ERROR «this.metaType»«ENDDEFINE»

«DEFINE cellAction(SectionCell cell) FOR ViewCall»
			Intent intent = new Intent(«cell.listActivityClassName()».this, «this.view.activityClassName()».class);
			Serializable contentProvider = «contentProvider(this.provider, "")»;
			intent.putExtra("provider", contentProvider);
			startActivity(intent);
«ENDDEFINE»

«DEFINE cellAction(SectionCell cell) FOR ExternalOpen»
			Intent intent = new LabeledIntent(Intent.ACTION_VIEW, Uri.parse(«this.url.expression("")»));
			startActivity(intent);
«ENDDEFINE»

