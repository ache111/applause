/*
 * generated by Xtext
 */
package org.applause.lang.scoping;

import static org.eclipse.xtext.scoping.Scopes.scopeFor;

import org.applause.lang.applauseDsl.DataSource;
import org.applause.lang.applauseDsl.DataSourceCall;
import org.applause.lang.applauseDsl.Entity;
import org.applause.lang.applauseDsl.EntityMemberCall;
import org.applause.lang.applauseDsl.ListItemCell;
import org.applause.lang.applauseDsl.Type;
import org.applause.lang.applauseDsl.UIComponentDeclaration;
import org.applause.lang.applauseDsl.UIComponentMemberCall;
import org.applause.lang.applauseDsl.UIComponentMemberDeclaration;
import org.applause.lang.applauseDsl.UIComponentOrDataType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class ApplauseDslScopeProvider extends AbstractDeclarativeScopeProvider {
	
	IScope scope_ListItemCell_configurations(ListItemCell ctx, EReference ref) {
		return scopeFor(ctx.getType().getMembers());
	}
	
	IScope scope_UIComponentMemberCall_component(ListItemCell ctx, EReference ref) {
		return scopeFor(ctx.getType().getMembers());
	}
	
	IScope scope_UIComponentMemberCall_member(UIComponentMemberCall ctx, EReference ref) {
		UIComponentOrDataType type = ctx.getComponent().getType();
		if (type instanceof UIComponentDeclaration) {
			UIComponentDeclaration uicomponent = (UIComponentDeclaration) type;
			return scopeFor(uicomponent.getMembers());
		}
		return null;
	}
	
	IScope scope_EntityMemberCall_head(ListItemCell ctx, EReference ref) {
		Type type = nearestDataSource(ctx).getYields().getType();
		if (type instanceof Entity) {
			Entity entity = (Entity) type;
			return scopeFor(entity.getAttributes());
		}
		return null;
	}
	
	IScope scope_EntityMemberCallTail_head(EntityMemberCall ctx, EReference ref) {
		Type type = ctx.getHead().getType();
		if (type instanceof Entity) {
			Entity entity = (Entity) type;
			return scopeFor(entity.getAttributes());
		}
		return null;
	}
	
	IScope scope_UIComponentMemberConfiguration_type(ListItemCell ctx, EReference ref) {
		EList<UIComponentMemberDeclaration> members = ctx.getType().getMembers();
		IScope outer = scopeFor(ctx.getType().getMembers());
		for (UIComponentMemberDeclaration member : members) {
			UIComponentOrDataType type = member.getType();
			if (type instanceof UIComponentDeclaration) {
				UIComponentDeclaration uicomponent = (UIComponentDeclaration) type;
				EList<UIComponentMemberDeclaration> innerMembers = uicomponent.getMembers();
				return scopeFor(innerMembers, outer);
			}
		}
		return outer;
	}
	
	private DataSource nearestDataSource(ListItemCell ctx) {
		return ctx.getDatasource().getDatasource();
	}
	
	IScope scope_AttributeReference_value(ListItemCell ctx, EReference ref) {
		Type type = nearestDataSource(ctx).getYields().getType();
		if (type instanceof Entity) {
			Entity entity = (Entity) type;
			return scopeFor(entity.getAttributes());
		}
		return null;
	}
	
	IScope scope_DataSourceOutletCall_outlet(DataSourceCall ctx, EReference ref) {
		return scopeFor(ctx.getDatasource().getOutlets());
	}
	
	IScope scope_UIComponentMemberConfiguration_value(ListItemCell ctx, EReference ref) {
		return null;
	}
	
}
