/*
 * generated by Xtext
 */
package org.applause.lang.generator.ios

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.applause.lang.applauseDsl.Entity
import org.applause.lang.applauseDsl.Attribute
import com.google.inject.Inject

class ApplauseDslGenerator implements IGenerator {

	@Inject extension BoilerplateExtensions
	@Inject extension EntityExtensions
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(entity:resource.allContents.toIterable.filter(typeof(Entity))) {
			fsa.generateFile(entity.fileName, compile(entity))
		}
	}
	
	def compile(Entity entity) '''
		«fileHeader()»
		public «IF entity.isAbstract»abstract «ENDIF»class «entity.typeName» «IF entity.superEntity != null»extends «entity.superEntity.typeName» «ENDIF»{
			«FOR attribute:entity.attributes»
				«compile(attribute)»
			«ENDFOR»
		}
	'''
	
	def compile(Attribute attribute) '''
		private «attribute.typeName» «attribute.fieldName»;
		
		public «attribute.typeName» «attribute.getterName»() {
			return «attribute.name»;
		}
		
		public void «attribute.setterName»(«attribute.type.name» «attribute.name») {
			this.«attribute.fieldName» = «attribute.name»;
		}
	'''

}
